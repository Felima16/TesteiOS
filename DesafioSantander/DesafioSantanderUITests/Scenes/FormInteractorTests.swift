//
//  FormInteractorTests.swift
//  DesafioSantander
//
//  Created by Fernanda de Lima on 02/10/18.
//  Copyright (c) 2018 FeLima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DesafioSantander
import XCTest

class FormInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: FormInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupFormInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupFormInteractor()
  {
    sut = FormInteractor()
  }
  
  // MARK: Test doubles

  
  // MARK: Tests
  
    class FormWorkerSpy: FormWorker
    {
        let form = FormModal(cells: [Seeds.Forms.text, Seeds.Forms.html])
        
        var fetchWithCompletionHandlerCalled = false
        var fetchWithDelegateCalled = false
        
        override func fetch(completion: @escaping (FormModal) -> Void)
        {
            fetchWithCompletionHandlerCalled = true
            completion(form)
        }
        
        override func fetch()
        {
            fetchWithDelegateCalled = true
            delegate?.formWorker(formWorker: self, didFetchForm: form)
        }
    }
    
    class FormPresentationLogicSpy: FormPresentationLogic
    {
        var presentFetchedFormCalled = false
        
        func presentFetchedForms(response: Form.FecthForm.Response)
        {
            presentFetchedFormCalled = true
        }
    }
    
    // MARK: Tests
    
    // MARK: Block implementation
    
    func testFetchFormShouldAskWorkerToFetchFormWithBlock()
    {
        guard sut.asyncOpKind == .block else { return }
        
        // Given
        let formWorkerSpy = FormWorkerSpy()
        sut.worker = formWorkerSpy
        
        // When
        let request = Form.FecthForm.Request()
        sut.fetchForm(request: request)
        
        // Then
        XCTAssertTrue(formWorkerSpy.fetchWithCompletionHandlerCalled, "fetchForm(request:) should ask the worker to fetch form")
    }
    
    func testFetchFormShouldAskPresenterToFormatForm()
    {
        // Given
        let formWorkerSpy = FormWorkerSpy()
        sut.worker = formWorkerSpy
        let formPresentationLogicSpy = FormPresentationLogicSpy()
        sut.presenter = formPresentationLogicSpy
        
        // When
        let request = Form.FecthForm.Request()
        sut.fetchForm(request: request)
        
        // Then
        XCTAssertTrue(formPresentationLogicSpy.presentFetchedFormCalled, "fetchForm(request:) should ask the presenter to format form")
    }
    
    // MARK: Delegate implementation
    
    func testFetchFormShouldAskWorkerToFetchFormWithDelegate()
    {
        guard sut.asyncOpKind == .delegate else { return }
        
        // Given
        let formWorkerSpy = FormWorkerSpy()
        sut.worker = formWorkerSpy
        
        // When
        let request = Form.FecthForm.Request()
        sut.fetchForm(request: request)
        
        // Then
        XCTAssertTrue(formWorkerSpy.fetchWithDelegateCalled, "fetchForm(request:) should ask the worker to fetch Form")
        XCTAssertNotNil(sut.worker.delegate, "fetchForm(request:) should set itself to be the delegate to be notified of fetch results")
    }
    
    func testListFormWorkerDidFetchFormShouldAskPresenterToFormatForm()
    {
        // Given
        let formWorkerSpy = FormWorkerSpy()
        sut.worker = formWorkerSpy
        let formPresentationLogicSpy = FormPresentationLogicSpy()
        sut.presenter = formPresentationLogicSpy
        
        // When
        sut.formWorker(formWorker: formWorkerSpy, didFetchForm: formWorkerSpy.form)
        
        // Then
        XCTAssertTrue(formPresentationLogicSpy.presentFetchedFormCalled, "listFormWorker(listFormWorker:didFetchForm:) should ask the presenter to format Form")
    }
}
