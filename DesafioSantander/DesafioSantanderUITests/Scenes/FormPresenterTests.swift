//
//  FormPresenterTests.swift
//  DesafioSantander
//
//  Created by Fernanda de Lima on 02/10/18.
//  Copyright (c) 2018 FeLima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DesafioSantander
import XCTest

class FormPresenterTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: FormPresenter!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupFormPresenter()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupFormPresenter()
  {
    sut = FormPresenter()
  }
  
  // MARK: Test doubles
  
  class FormDisplayLogicSpy: FormDisplayLogic
  {
    var displayFetchedFormCalled = false
    var displayFetchedFormViewModel: Form.FecthForm.ViewModel!
    
    func displayFetchedForm(viewModel: Form.FecthForm.ViewModel)
    {
        displayFetchedFormCalled = true
        displayFetchedFormViewModel = viewModel
    }
  }
  
  // MARK: Tests
  
    func testPresentFetchedFormShouldAskViewControllerToDisplayForm()
    {
        // Given
        let formDisplayLogicSpy = FormDisplayLogicSpy()
        sut.viewController = formDisplayLogicSpy
        
        // When
        let form = FormModal(cells: [Seeds.Forms.text, Seeds.Forms.html])
        let response = Form.FecthForm.Response(formModal: form)
        sut.presentFetchedForms(response: response)
        
        // Then
//        let expectedForm = [Seeds.DisplayedForm.text, Seeds.DisplayedForm.html]
//        let actualForm = formDisplayLogicSpy.displayFetchedFormViewModel.displayedForm
        XCTAssertTrue(formDisplayLogicSpy.displayFetchedFormCalled, "presentFetchedForm(response:) should ask the view controller to display form")
    }
}
