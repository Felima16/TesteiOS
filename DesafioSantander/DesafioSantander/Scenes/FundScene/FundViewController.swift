//
//  FundViewController.swift
//  DesafioSantander
//
//  Created by Fernanda de Lima on 03/09/2018.
//  Copyright (c) 2018 FeLima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundDisplayLogic: class
{
  func displayFetchedFund(viewModel: Fund.FecthFund.ViewModel)
}

class FundViewController: UIViewController, FundDisplayLogic{
  var interactor: FundBusinessLogic?
  var router: (NSObjectProtocol & FundRoutingLogic & FundDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = FundInteractor()
    let presenter = FundPresenter()
    let router = FundRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    investirButton.layer.cornerRadius = min(investirButton.frame.width, investirButton.frame.height)/2
    fetchFund()
  }
  
  // MARK: Fetch fund
    var displayedFund : Fund.FecthFund.ViewModel.DisplayedScreen?
    
    func fetchFund(){
        let request = Fund.FecthFund.Request()
        interactor?.fetchFund(request: request)
    }
  
  //@IBOutlet weak var nameTextField: UITextField!
    
    @IBOutlet weak var titlefund: UILabel!
    @IBOutlet weak var fundName: UILabel!
    @IBOutlet weak var whatIs: UILabel!
    @IBOutlet weak var defination: UILabel!
    @IBOutlet weak var riskTitle: UILabel!
    
    @IBOutlet weak var mesFund: UILabel!
    @IBOutlet weak var mesCDI: UILabel!
    @IBOutlet weak var anualFund: UILabel!
    @IBOutlet weak var anualCDI: UILabel!
    @IBOutlet weak var dozeFund: UILabel!
    @IBOutlet weak var dozeCDI: UILabel!
    
    //infos
    @IBOutlet var name: Array<UILabel>?
    @IBOutlet var data: Array<UILabel>?
    
    //downInfo
    @IBOutlet var nameDown: Array<UILabel>?
    @IBOutlet weak var investirButton: UIButton!
    
    @IBAction func downloadActionButton(_ sender: Any) {
        let url = URL(string: "https://www.google.com/")!
        UIApplication.shared.openURL(url)
    }
  
    
    func displayFetchedFund(viewModel: Fund.FecthFund.ViewModel){
        displayedFund = viewModel.displayedFund
        preencherFundos()
    }
    
    private func preencherFundos(){
        if let screen = displayedFund{
            titlefund.text = screen.title
            fundName.text = screen.fundName
            whatIs.text = screen.whatIs
            defination.text = screen.definition
            riskTitle.text = screen.riskTitle
            mesFund.text = "\(screen.moreInfo?.month?.fund ?? 0)"
            mesCDI.text = "\(screen.moreInfo?.month?.CDI ?? 0)"
            anualFund.text = "\(screen.moreInfo?.year?.fund ?? 0)"
            anualCDI.text = "\(screen.moreInfo?.year?.CDI ?? 0)"
            dozeFund.text = "\(screen.moreInfo?.dozeMonths?.fund ?? 0)"
            dozeCDI.text = "\(screen.moreInfo?.dozeMonths?.CDI ?? 0)"

            for i in 0..<screen.info!.count{
                name![i].text = screen.info![i].name
                data![i].text = screen.info![i].data
            }
            
            for i in 0..<screen.downInfo!.count{
                nameDown![i].text = screen.downInfo![i].name
            }
            
        }
        
    }
}
