//
//  FundInteractor.swift
//  DesafioSantander
//
//  Created by Fernanda de Lima on 03/09/2018.
//  Copyright (c) 2018 FeLima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundBusinessLogic{
    func fetchFund(request: Fund.FecthFund.Request)
}

protocol FundDataStore{
    //var name: String { get set }
}

class FundInteractor: FundBusinessLogic, FundDataStore, FundWorkerDelegate{
    
    var presenter: FundPresentationLogic?
    var worker = FundWorker()
    
    enum AsyncOpKind {
        case block, delegate
    }
    var asyncOpKind = AsyncOpKind.block
    
    // MARK: Fetch Funds
    
    func fetchFund(request: Fund.FecthFund.Request) {
        
        switch asyncOpKind {
        case .block:
            // MARK: Block implementation
            worker.fetch { (fund) in
                let response = Fund.FecthFund.Response(fundModal: fund)
                self.presenter?.presentFetchedFunds(response: response)
            }
            
        case .delegate:
            // MARK: Delegate method implementation
            worker.delegate = self
            worker.fetch()
        }
    }
    
    func fundWorker(fundWorker: FundWorker, didFetchFund fund: FundModal) {
        let response = Fund.FecthFund.Response(fundModal: fund)
        self.presenter?.presentFetchedFunds(response: response)
    }
}
